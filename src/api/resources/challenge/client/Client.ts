/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElsiKoraApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Challenge {
    export interface Options {
        environment?: core.Supplier<environments.ElsiKoraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-Secret-Key header */
        secretKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Secret-Key header */
        secretKey?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Challenge {
    constructor(protected readonly _options: Challenge.Options) {}

    /**
     * This method is used for solving `Challenge`
     *
     * @param {string} challenge - Challenge identifier
     * @param {ElsiKoraApi.ChallengeSolveRequestBodyDto} request
     * @param {Challenge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElsiKoraApi.BadRequestError}
     * @throws {@link ElsiKoraApi.UnauthorizedError}
     * @throws {@link ElsiKoraApi.NotFoundError}
     * @throws {@link ElsiKoraApi.InternalServerError}
     *
     * @example
     *     await client.challenge.challengeControllerSolve("ee2e5799-8df3-4a80-bed0-25f30abbe744", {
     *         solution: {
     *             type: "click",
     *             data: true
     *         }
     *     })
     */
    public async challengeControllerSolve(
        challenge: string,
        request: ElsiKoraApi.ChallengeSolveRequestBodyDto,
        requestOptions?: Challenge.RequestOptions,
    ): Promise<ElsiKoraApi.ChallengeSolveResponseBodyDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElsiKoraApiEnvironment.Default,
                `v1/challenge/${encodeURIComponent(challenge)}/solve`,
            ),
            method: "POST",
            headers: {
                "X-Secret-Key": await core.Supplier.get(this._options.secretKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ChallengeSolveRequestBodyDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ChallengeSolveResponseBodyDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ElsiKoraApi.BadRequestError(
                        serializers.ExceptionBadRequestDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 401:
                    throw new ElsiKoraApi.UnauthorizedError(
                        serializers.ExceptionUnauthorizedDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 404:
                    throw new ElsiKoraApi.NotFoundError(
                        serializers.ExceptionNotFoundDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 500:
                    throw new ElsiKoraApi.InternalServerError(
                        serializers.ExceptionInternalServerErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ElsiKoraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElsiKoraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ElsiKoraApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/challenge/{challenge}/solve.",
                );
            case "unknown":
                throw new errors.ElsiKoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This method is used for verifying `Challenge`
     *
     * @param {string} challenge - Challenge identifier
     * @param {ElsiKoraApi.ChallengeVerifyRequestBodyDto} request
     * @param {Challenge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElsiKoraApi.BadRequestError}
     * @throws {@link ElsiKoraApi.UnauthorizedError}
     * @throws {@link ElsiKoraApi.NotFoundError}
     * @throws {@link ElsiKoraApi.InternalServerError}
     *
     * @example
     *     await client.challenge.challengeControllerVerify("b6e1c18f-6099-4d29-bf72-45a8a1f2fbfb", {
     *         token: "44a846cc-0813-4d8d-b608-f8e8887a8b74"
     *     })
     */
    public async challengeControllerVerify(
        challenge: string,
        request: ElsiKoraApi.ChallengeVerifyRequestBodyDto,
        requestOptions?: Challenge.RequestOptions,
    ): Promise<ElsiKoraApi.ChallengeVerifyResponseBodyDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElsiKoraApiEnvironment.Default,
                `v1/challenge/${encodeURIComponent(challenge)}/verify`,
            ),
            method: "POST",
            headers: {
                "X-Secret-Key": await core.Supplier.get(this._options.secretKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ChallengeVerifyRequestBodyDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ChallengeVerifyResponseBodyDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ElsiKoraApi.BadRequestError(
                        serializers.ExceptionBadRequestDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 401:
                    throw new ElsiKoraApi.UnauthorizedError(
                        serializers.ExceptionUnauthorizedDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 404:
                    throw new ElsiKoraApi.NotFoundError(
                        serializers.ExceptionNotFoundDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 500:
                    throw new ElsiKoraApi.InternalServerError(
                        serializers.ExceptionInternalServerErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ElsiKoraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElsiKoraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ElsiKoraApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/challenge/{challenge}/verify.",
                );
            case "unknown":
                throw new errors.ElsiKoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This method is used for creating `Challenge`
     *
     * @param {ElsiKoraApi.ChallengeCreateBodyDto} request
     * @param {Challenge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElsiKoraApi.UnauthorizedError}
     * @throws {@link ElsiKoraApi.InternalServerError}
     *
     * @example
     *     await client.challenge.challengeControllerCreate({
     *         type: "click"
     *     })
     */
    public async challengeControllerCreate(
        request: ElsiKoraApi.ChallengeCreateBodyDto,
        requestOptions?: Challenge.RequestOptions,
    ): Promise<ElsiKoraApi.ChallengeCreateResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElsiKoraApiEnvironment.Default,
                "v1/challenge",
            ),
            method: "POST",
            headers: {
                "X-Secret-Key": await core.Supplier.get(this._options.secretKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ChallengeCreateBodyDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ChallengeCreateResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new ElsiKoraApi.UnauthorizedError(
                        serializers.ExceptionUnauthorizedDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 500:
                    throw new ElsiKoraApi.InternalServerError(
                        serializers.ExceptionInternalServerErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ElsiKoraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElsiKoraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ElsiKoraApiTimeoutError("Timeout exceeded when calling POST /v1/challenge.");
            case "unknown":
                throw new errors.ElsiKoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This method is used for fetching `Challenge`
     *
     * @param {string} id - Challenge identifier
     * @param {Challenge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElsiKoraApi.UnauthorizedError}
     * @throws {@link ElsiKoraApi.NotFoundError}
     * @throws {@link ElsiKoraApi.InternalServerError}
     *
     * @example
     *     await client.challenge.challengeControllerGet("09beb345-10e8-4254-8913-2a86dc4632a8")
     */
    public async challengeControllerGet(
        id: string,
        requestOptions?: Challenge.RequestOptions,
    ): Promise<ElsiKoraApi.ChallengeGetResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElsiKoraApiEnvironment.Default,
                `v1/challenge/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-Secret-Key": await core.Supplier.get(this._options.secretKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.9",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ChallengeGetResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new ElsiKoraApi.UnauthorizedError(
                        serializers.ExceptionUnauthorizedDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 404:
                    throw new ElsiKoraApi.NotFoundError(
                        serializers.ExceptionNotFoundDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                case 500:
                    throw new ElsiKoraApi.InternalServerError(
                        serializers.ExceptionInternalServerErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                    );
                default:
                    throw new errors.ElsiKoraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElsiKoraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ElsiKoraApiTimeoutError("Timeout exceeded when calling GET /v1/challenge/{id}.");
            case "unknown":
                throw new errors.ElsiKoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Public-Key": apiKeyValue };
    }
}
